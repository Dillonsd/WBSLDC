/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 14.03.2023 18:47:52

#include <stdio.h>
#include <stdlib.h>

#include "edge-impulse-sdk/porting/ei_classifier_porting.h"
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
extern void ei_printf(const char* format, ...);
}
#else
extern void ei_printf(const char* format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif  // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif  // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 368;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16)
    __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T>
struct TfArray {
  int sz;
  T elem[SZ];
};
enum used_operators_e { OP_FULLY_CONNECTED, OP_SOFTMAX, OP_LAST };
struct TensorInfo_t {  // subset of TfLiteTensor used for initialization from
                       // constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t {  // subset of TfLiteNode used for initialization from
                     // constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[14];
TfLiteEvalTensor tflEvalTensors[14];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[5];

const TfArray<2, int> tensor_dimension0 = {2, {1, 66}};
const TfArray<1, float> quant0_scale = {1,
                                        {
                                            0.3953806459903717,
                                        }};
const TfArray<1, int> quant0_zero = {1, {-119}};
const TfLiteAffineQuantization quant0 = {(TfLiteFloatArray*)&quant0_scale,
                                         (TfLiteIntArray*)&quant0_zero, 0};
const ALIGN(16) int8_t tensor_data1[48 * 66] = {
    -80,  19,   19,   -43,  91,   -61,  -95,  72,   20,   -34,  -70,  -92,
    105,  -32,  77,   -53,  -83,  24,   -27,  -46,  -41,  -98,  -12,  -31,
    3,    16,   -41,  -9,   -46,  -63,  6,    -51,  95,   92,   -8,   4,
    41,   37,   39,   20,   19,   87,   98,   94,   77,   29,   -1,   -56,
    18,   33,   74,   72,   43,   -88,  -11,  -29,  20,   -64,  23,   -99,
    29,   53,   8,    12,   38,   6,    8,    7,    87,   41,   81,   -12,
    16,   13,   92,   -27,  41,   -38,  68,   83,   55,   -25,  2,    -70,
    57,   10,   -19,  -26,  -48,  57,   93,   92,   101,  93,   48,   94,
    -16,  50,   -73,  40,   -56,  -46,  -26,  -44,  35,   -9,   13,   -39,
    38,   66,   -61,  -28,  -69,  70,   -64,  -103, 43,   -49,  -36,  -50,
    -36,  -76,  -70,  -44,  17,   -79,  -65,  -23,  -6,   78,   -80,  -69,
    -9,   -98,  66,   -29,  -43,  -79,  -19,  -47,  -43,  28,   -55,  -73,
    17,   -21,  59,   18,   -67,  -38,  -55,  -6,   100,  90,   -69,  45,
    16,   29,   58,   77,   -20,  -82,  -30,  39,   -48,  21,   -80,  85,
    48,   -51,  -18,  -80,  61,   73,   -68,  23,   -74,  -4,   6,    80,
    53,   7,    93,   77,   93,   -38,  62,   -3,   48,   -44,  4,    4,
    77,   -26,  -97,  -10,  24,   16,   -107, -24,  29,   -100, 72,   10,
    -66,  18,   -30,  -62,  -30,  -20,  -95,  82,   55,   29,   98,   -60,
    -47,  60,   69,   -10,  -35,  15,   -43,  -96,  63,   -43,  -52,  -15,
    9,    -18,  65,   71,   89,   52,   64,   -94,  -87,  -42,  -80,  -28,
    -25,  24,   84,   50,   28,   91,   47,   91,   33,   50,   48,   -47,
    -62,  70,   31,   -20,  30,   -28,  -55,  -25,  -93,  -39,  -61,  -14,
    11,   24,   16,   -30,  19,   -18,  74,   -44,  -13,  -101, -24,  -60,
    -43,  48,   52,   45,   -83,  86,   55,   20,   42,   -39,  85,   -9,
    -4,   -81,  22,   -38,  2,    83,   -25,  -93,  60,   -7,   105,  67,
    -68,  60,   -25,  45,   -70,  -91,  -61,  -103, 21,   -31,  -47,  5,
    -60,  23,   -64,  -25,  -99,  -52,  -75,  8,    84,   101,  -54,  45,
    -38,  -96,  38,   86,   -69,  -31,  51,   -22,  97,   -42,  3,    86,
    0,    -85,  -82,  -30,  -69,  50,   4,    29,   17,   -15,  51,   12,
    51,   83,   -21,  -69,  -44,  -100, -24,  -25,  90,   -53,  -58,  18,
    -50,  90,   -85,  -71,  -101, 95,   53,   -98,  19,   71,   36,   63,
    73,   -61,  -27,  -41,  74,   -30,  8,    -56,  -72,  -62,  -93,  -23,
    -60,  -57,  -39,  57,   20,   -98,  62,   -86,  34,   -62,  -47,  9,
    -81,  83,   20,   -9,   -26,  -79,  30,   -7,   7,    -68,  42,   -91,
    -37,  -26,  -3,   21,   -70,  -16,  86,   81,   54,   -72,  -69,  -67,
    30,   40,   -14,  -49,  -1,   79,   5,    -9,   -3,   56,   40,   47,
    -29,  35,   -26,  -56,  55,   -6,   15,   51,   42,   -57,  -105, -46,
    -46,  72,   56,   -36,  -48,  -43,  -77,  -29,  33,   -17,  -47,  -46,
    76,   -33,  14,   -49,  -13,  -31,  -21,  -17,  49,   55,   76,   -83,
    84,   -33,  60,   43,   -28,  71,   6,    51,   38,   -110, -18,  -31,
    -102, 1,    4,    -29,  101,  -57,  -69,  -28,  -86,  17,   -69,  -69,
    -44,  -51,  28,   -8,   85,   -60,  -55,  -43,  62,   -96,  -110, -17,
    -72,  -87,  -43,  45,   92,   2,    4,    94,   9,    59,   -82,  -110,
    68,   -74,  -18,  7,    -28,  -3,   14,   -32,  5,    -110, -65,  6,
    35,   65,   89,   -39,  87,   5,    -63,  -42,  -19,  101,  -31,  -16,
    -5,   -28,  34,   -16,  -83,  -80,  75,   -19,  -72,  87,   -58,  68,
    -6,   -20,  -31,  -18,  64,   64,   31,   5,    9,    36,   14,   54,
    3,    83,   47,   1,    -21,  99,   -17,  -61,  30,   -7,   71,   89,
    85,   -41,  -35,  -26,  83,   -77,  84,   -27,  103,  -112, -19,  -93,
    46,   -27,  -58,  -41,  86,   -67,  1,    -77,  34,   -20,  49,   -61,
    -30,  19,   62,   -91,  60,   -58,  19,   96,   -91,  -15,  -87,  18,
    -34,  17,   -37,  -46,  -42,  65,   -14,  -61,  56,   -23,  35,   -122,
    -70,  28,   80,   104,  -70,  -108, 91,   -24,  63,   -97,  11,   58,
    -5,   -95,  -71,  -85,  66,   -12,  -56,  -76,  37,   45,   52,   9,
    11,   89,   96,   6,    -59,  -3,   -37,  42,   -47,  -30,  -27,  -76,
    -87,  71,   21,   69,   -25,  27,   -34,  55,   -49,  -41,  -34,  65,
    -20,  -11,  -58,  -27,  30,   11,   -79,  76,   -32,  17,   -43,  -37,
    22,   -47,  105,  -75,  94,   79,   -47,  96,   36,   -13,  -69,  -68,
    11,   15,   106,  104,  89,   -10,  -2,   -23,  -70,  93,   -26,  46,
    -40,  -61,  49,   -60,  27,   -83,  56,   -42,  -67,  -85,  -32,  19,
    -11,  34,   33,   -82,  -59,  -59,  81,   52,   89,   -46,  7,    27,
    94,   -63,  83,   114,  85,   -15,  87,   -79,  -23,  75,   48,   -91,
    -16,  77,   -5,   83,   94,   46,   58,   -16,  40,   51,   -67,  63,
    17,   -73,  17,   96,   -57,  26,   -7,   89,   -7,   59,   -5,   101,
    0,    -41,  -2,   80,   -78,  -43,  -44,  18,   61,   62,   87,   -13,
    -51,  53,   40,   -10,  -47,  12,   -25,  -21,  65,   -20,  93,   32,
    45,   10,   38,   -40,  39,   -65,  103,  -11,  -13,  -26,  -71,  44,
    8,    -27,  -46,  -50,  -12,  -90,  -86,  73,   -28,  66,   -61,  11,
    35,   -67,  -20,  90,   25,   -46,  19,   82,   45,   103,  61,   -67,
    38,   -12,  87,   97,   -89,  101,  69,   -3,   -67,  42,   -30,  -29,
    -51,  -76,  -30,  96,   -62,  47,   -46,  -24,  -38,  1,    96,   23,
    50,   -62,  -42,  8,    67,   82,   0,    -38,  -8,   71,   -44,  53,
    -33,  94,   85,   -11,  -87,  28,   63,   13,   -28,  89,   -46,  -39,
    78,   -85,  1,    99,   91,   -63,  57,   3,    67,   90,   -32,  -85,
    11,   22,   77,   -105, 22,   57,   68,   3,    -77,  -71,  58,   -92,
    15,   -51,  -14,  -82,  -5,   -95,  36,   47,   -77,  -64,  -8,   -38,
    -38,  70,   57,   71,   -34,  -71,  26,   18,   -28,  69,   -77,  43,
    -64,  37,   -38,  -60,  -74,  -73,  -74,  68,   -9,   98,   64,   -56,
    -72,  28,   -29,  31,   -55,  11,   -33,  77,   74,   2,    -4,   -66,
    1,    -89,  41,   -41,  95,   -81,  84,   64,   -77,  -58,  -36,  -40,
    52,   68,   95,   -82,  -88,  -10,  -23,  95,   39,   81,   35,   25,
    42,   20,   -28,  85,   53,   -33,  -37,  -21,  -6,   15,   91,   -76,
    23,   -24,  58,   -65,  33,   -72,  -50,  38,   100,  -76,  70,   -37,
    -52,  44,   -29,  -105, -57,  -24,  69,   -73,  11,   -35,  -16,  -46,
    23,   30,   -49,  -70,  108,  -8,   -25,  65,   71,   69,   70,   -94,
    14,   -84,  26,   90,   2,    -39,  -41,  -67,  8,    -62,  -80,  1,
    -19,  60,   2,    37,   -76,  -48,  -88,  -40,  42,   -44,  36,   -11,
    0,    -36,  -45,  61,   -2,   -53,  -24,  -4,   -70,  -58,  -29,  86,
    -74,  59,   -28,  -84,  -100, -77,  -26,  -28,  63,   -42,  37,   56,
    -56,  29,   61,   -15,  -51,  15,   -84,  65,   94,   -91,  -70,  13,
    62,   -48,  -60,  48,   -25,  15,   43,   23,   15,   73,   80,   29,
    -41,  -24,  18,   9,    87,   11,   98,   -13,  26,   40,   76,   -43,
    60,   61,   35,   -11,  72,   75,   -36,  -38,  -65,  57,   69,   -7,
    91,   71,   86,   -12,  -45,  -21,  -52,  -12,  -11,  -89,  -7,   4,
    -6,   -73,  -25,  -35,  57,   -32,  -64,  -80,  -20,  90,   -40,  6,
    -67,  69,   24,   16,   -32,  -69,  64,   62,   -9,   42,   29,   -12,
    -109, -93,  16,   70,   -32,  72,   20,   89,   -90,  -60,  54,   31,
    -11,  -63,  -92,  -32,  99,   2,    -91,  -70,  -19,  61,   22,   49,
    61,   89,   -70,  11,   28,   -89,  25,   -71,  -29,  -66,  -87,  -8,
    -63,  -23,  -56,  -60,  4,    66,   23,   -43,  69,   77,   -46,  17,
    1,    -107, 86,   41,   -44,  -75,  -21,  25,   50,   14,   41,   67,
    -94,  4,    -42,  -6,   34,   -57,  -16,  -71,  -24,  19,   -55,  -102,
    73,   -57,  -96,  17,   11,   81,   -51,  53,   91,   21,   42,   19,
    64,   63,   27,   -8,   -86,  -77,  -46,  -39,  78,   16,   -12,  -30,
    96,   28,   17,   -64,  -40,  -83,  -21,  -32,  81,   22,   -13,  1,
    -1,   73,   -98,  1,    70,   34,   23,   -2,   75,   81,   33,   -69,
    -86,  -108, -55,  20,   43,   43,   -101, 34,   84,   60,   -85,  -65,
    8,    43,   -43,  66,   45,   -91,  -71,  99,   -31,  -78,  36,   62,
    -80,  25,   -49,  10,   0,    79,   -1,   -66,  -10,  -47,  0,    -85,
    106,  -16,  -71,  -23,  34,   83,   44,   -78,  -76,  33,   20,   -71,
    -72,  -102, -6,   24,   0,    92,   -54,  53,   21,   93,   -52,  18,
    96,   -52,  -78,  72,   30,   102,  -85,  64,   23,   -66,  23,   67,
    50,   -20,  103,  -26,  -14,  -89,  12,   92,   26,   -26,  85,   26,
    37,   -21,  41,   15,   44,   -64,  66,   -28,  22,   33,   -20,  -87,
    55,   73,   51,   -72,  3,    -1,   -8,   -54,  -53,  -9,   25,   104,
    100,  88,   19,   20,   54,   28,   18,   45,   -39,  2,    99,   -79,
    -38,  -12,  -44,  45,   -51,  -66,  55,   1,    72,   58,   75,   67,
    -24,  -50,  -49,  101,  85,   22,   -87,  12,   -60,  -26,  21,   81,
    -50,  5,    -29,  -91,  53,   -14,  -31,  -65,  -83,  50,   87,   -62,
    101,  71,   46,   -43,  4,    14,   6,    -72,  -4,   -80,  -55,  -43,
    -49,  -12,  99,   51,   -19,  -24,  -6,   20,   48,   -63,  -36,  -1,
    -82,  -50,  18,   -35,  -76,  -16,  -60,  -4,   30,   -31,  108,  55,
    -2,   -77,  84,   -13,  -18,  -98,  -20,  73,   -91,  -55,  -49,  -43,
    62,   -91,  -97,  21,   -61,  54,   82,   -64,  -71,  44,   -41,  93,
    -49,  24,   8,    61,   -6,   87,   -47,  -6,   -54,  -85,  23,   93,
    -79,  -35,  83,   34,   -29,  -20,  -68,  47,   76,   -32,  64,   -19,
    -77,  87,   21,   8,    9,    -90,  -18,  -9,   -11,  88,   -52,  65,
    73,   -60,  -3,   54,   120,  58,   -78,  -101, 65,   -27,  -58,  -46,
    -74,  -80,  42,   -20,  -32,  -17,  -13,  -43,  13,   86,   70,   86,
    -42,  22,   29,   62,   48,   53,   95,   56,   -96,  46,   -42,  -71,
    25,   -6,   -48,  -82,  -28,  93,   -1,   73,   -97,  68,   89,   -42,
    -48,  32,   72,   -10,  -64,  -96,  78,   40,   70,   19,   -58,  -71,
    49,   -86,  -62,  28,   -1,   -36,  -111, 43,   -44,  -92,  -91,  61,
    -103, -16,  43,   81,   127,  104,  15,   56,   77,   11,   1,    -60,
    9,    -12,  -61,  -2,   -36,  -70,  -13,  50,   -31,  -46,  77,   -3,
    -24,  78,   -95,  -61,  37,   -93,  59,   -67,  -67,  34,   94,   -18,
    65,   30,   6,    -48,  92,   74,   101,  52,   -45,  11,   37,   -67,
    28,   90,   66,   2,    -96,  -94,  -54,  73,   77,   37,   -4,   -57,
    10,   59,   53,   47,   37,   16,   80,   3,    -101, 12,   -105, 6,
    13,   46,   -23,  -75,  89,   -87,  53,   -10,  -25,  25,   62,   63,
    -98,  -78,  48,   -2,   -32,  98,   -57,  78,   51,   90,   84,   56,
    -66,  -23,  -22,  4,    -67,  73,   79,   94,   -28,  -1,   -104, -8,
    -56,  -54,  -38,  -26,  29,   73,   81,   45,   25,   -6,   -65,  -88,
    98,   -32,  -113, 20,   -79,  -63,  5,    106,  -28,  6,    37,   -27,
    -46,  -111, 36,   52,   -60,  -27,  9,    -73,  23,   -12,  63,   2,
    -96,  -25,  -29,  -48,  -102, 29,   46,   15,   -78,  69,   -48,  -58,
    52,   -31,  30,   20,   -69,  -47,  62,   -95,  -54,  -22,  22,   89,
    -70,  45,   -19,  34,   -26,  -35,  89,   -18,  32,   3,    48,   77,
    63,   3,    68,   -63,  -66,  40,   92,   33,   -70,  73,   -28,  -49,
    -82,  84,   41,   76,   -94,  34,   -7,   -57,  28,   19,   70,   -25,
    -85,  -14,  3,    55,   -93,  79,   14,   44,   -43,  -38,  26,   64,
    84,   64,   -59,  -78,  -15,  34,   50,   -2,   32,   60,   -71,  5,
    -74,  38,   8,    -8,   66,   23,   -41,  68,   94,   95,   -57,  -61,
    -100, -2,   -30,  -81,  74,   69,   27,   9,    57,   -79,  -93,  -24,
    44,   30,   -97,  -14,  -50,  -48,  34,   0,    -112, -94,  66,   24,
    -18,  -43,  -38,  18,   49,   -51,  12,   37,   97,   94,   62,   92,
    -11,  66,   83,   -11,  60,   -75,  79,   -103, -21,  15,   90,   -22,
    -65,  -63,  -72,  -30,  -86,  68,   -56,  -29,  -71,  29,   -28,  -41,
    28,   -16,  14,   94,   98,   -56,  -89,  41,   -62,  79,   25,   50,
    36,   54,   -51,  -5,   73,   49,   27,   -87,  18,   37,   -38,  4,
    -21,  67,   -95,  -54,  -70,  102,  54,   9,    92,   73,   15,   77,
    -64,  -12,  59,   58,   -8,   10,   -80,  -27,  83,   70,   -84,  62,
    18,   71,   35,   33,   -95,  39,   -78,  37,   -57,  90,   -61,  63,
    23,   9,    26,   99,   70,   46,   -43,  15,   -16,  106,  56,   55,
    -61,  -89,  53,   -21,  96,   33,   37,   -3,   -2,   -72,  3,    104,
    -77,  100,  28,   7,    -25,  68,   57,   18,   14,   16,   28,   -29,
    39,   76,   20,   -7,   44,   -98,  -47,  -32,  -100, -91,  -89,  -43,
    77,   15,   -81,  22,   -84,  33,   -58,  -70,  71,   51,   38,   52,
    23,   -36,  64,   33,   -9,   22,   57,   -66,  89,   42,   74,   -56,
    49,   -78,  -14,  -56,  92,   -55,  -10,  -73,  7,    17,   51,   -19,
    8,    51,   -19,  -97,  -19,  -68,  62,   62,   -10,  -9,   -82,  -72,
    21,   -10,  6,    -19,  -79,  103,  -111, -102, 78,   53,   -16,  68,
    -32,  -78,  13,   67,   38,   11,   -78,  -17,  -82,  20,   -119, -59,
    72,   42,   58,   25,   34,   -45,  85,   -83,  8,    -77,  57,   92,
    -84,  20,   -62,  -43,  -86,  -5,   -46,  11,   88,   69,   -37,  -62,
    -35,  33,   -14,  59,   -63,  -30,  84,   102,  -92,  101,  -18,  57,
    64,   -16,  -27,  -14,  1,    79,   86,   72,   -43,  20,   -11,  -40,
    -38,  -1,   -38,  -11,  67,   -62,  48,   79,   47,   -76,  -32,  -77,
    33,   -59,  -48,  -100, 8,    -3,   -8,   62,   84,   44,   -60,  67,
    -18,  75,   81,   -3,   51,   -98,  38,   32,   -34,  -7,   -41,  82,
    -89,  73,   -8,   84,   -61,  -62,  24,   19,   -32,  43,   22,   89,
    -10,  11,   75,   -56,  -55,  87,   29,   5,    -5,   -49,  -52,  -31,
    -29,  81,   -90,  -38,  68,   -41,  -66,  10,   69,   -47,  -37,  52,
    93,   53,   90,   -91,  79,   -12,  5,    14,   -21,  104,  3,    -32,
    37,   -71,  44,   75,   -1,   45,   -27,  -74,  -70,  13,   69,   -4,
    27,   18,   -60,  100,  45,   -52,  27,   -80,  22,   44,   38,   5,
    58,   70,   38,   78,   99,   -51,  11,   33,   57,   41,   -69,  69,
    -73,  10,   45,   -42,  -90,  -44,  -86,  -50,  41,   -95,  -17,  4,
    86,   99,   -57,  -7,   64,   63,   78,   69,   -5,   3,    81,   2,
    30,   44,   27,   61,   -90,  32,   -14,  -81,  37,   -51,  19,   70,
    -73,  57,   10,   4,    -38,  -86,  -13,  -70,  -66,  80,   43,   -63,
    80,   -32,  -41,  -92,  -50,  -88,  -76,  33,   -22,  53,   47,   -94,
    -5,   -63,  29,   0,    17,   9,    89,   35,   16,   82,   -59,  -32,
    -24,  84,   -22,  -7,   -15,  69,   -91,  94,   28,   60,   6,    -89,
    -49,  85,   72,   -32,  86,   87,   -54,  -58,  -63,  62,   4,    76,
    -47,  -85,  -55,  -7,   -13,  -85,  77,   -11,  41,   -66,  -47,  -26,
    62,   61,   58,   -16,  -27,  33,   -47,  21,   88,   -29,  -5,   89,
    -95,  -10,  86,   54,   -78,  -39,  21,   82,   30,   -99,  -3,   -34,
    76,   24,   34,   8,    86,   -95,  -57,  -104, -99,  -68,  22,   87,
    53,   95,   25,   -36,  39,   16,   34,   46,   37,   30,   71,   -16,
    36,   -40,  87,   79,   -81,  -68,  -18,  39,   -46,  37,   -30,  55,
    -78,  71,   43,   32,   60,   -60,  -29,  -85,  -82,  15,   -38,  -16,
    8,    42,   -101, 77,   45,   -76,  -93,  57,   -58,  60,   -41,  -61,
    -31,  78,   78,   36,   69,   -19,  -1,   -10,  58,   57,   -38,  -37,
    -57,  20,   -54,  68,   -23,  48,   -104, -6,   77,   11,   -9,   59,
    -95,  -17,  -65,  -25,  58,   95,   39,   -31,  16,   36,   -16,  -33,
    -80,  32,   -25,  -64,  36,   2,    -77,  -28,  -75,  -24,  -79,  -9,
    -38,  76,   -58,  -39,  75,   26,   -101, 91,   39,   12,   -32,  -54,
    60,   89,   -31,  4,    26,   47,   48,   -31,  13,   70,   -36,  -9,
    -19,  -43,  47,   19,   95,   3,    -8,   -30,  -1,   -75,  -69,  8,
    31,   31,   46,   -5,   82,   74,   14,   67,   7,    68,   -12,  24,
    86,   -11,  -27,  70,   102,  -2,   -66,  36,   -13,  -53,  -88,  -34,
    87,   29,   -29,  -51,  99,   39,   -93,  83,   92,   65,   37,   -35,
    -67,  -96,  -27,  -67,  -97,  -12,  -49,  -23,  -66,  73,   -32,  -76,
    -64,  100,  102,  -14,  57,   64,   50,   -82,  -64,  86,   86,   -28,
    0,    58,   -66,  24,   91,   38,   -88,  -97,  -79,  -50,  8,    65,
    -73,  -14,  -113, -59,  27,   -12,  39,   -68,  -82,  -54,  32,   -51,
    -42,  9,    -71,  -46,  91,   91,   -72,  -77,  66,   -73,  102,  -85,
    30,   31,   27,   59,   52,   93,   25,   -56,  1,    -70,  21,   -45,
    80,   63,   59,   62,   88,   13,   -59,  41,   -86,  -29,  0,    68,
    -65,  45,   6,    26,   -51,  43,   22,   -68,  -27,  -10,  -82,  71,
    15,   63,   -57,  25,   49,   -49,  0,    -37,  54,   26,   -27,  -90,
    48,   -51,  86,   1,    -76,  -65,  -6,   54,   64,   43,   -29,  -29,
    34,   -95,  -42,  79,   -1,   73,   -92,  16,   -17,  35,   -68,  26,
    88,   -100, 47,   61,   -42,  29,   -81,  60,   48,   -19,  80,   53,
    1,    -46,  39,   -25,  -29,  -19,  -3,   -87,  7,    -86,  81,   -59,
    23,   -54,  -91,  -39,  23,   78,   53,   99,   42,   64,   -68,  -70,
    67,   -1,   67,   -53,  88,   -29,  -46,  -59,  82,   -41,  -78,  -86,
    44,   56,   53,   18,   -13,  -71,  23,   4,    15,   -15,  -102, 12,
    81,   -60,  -15,  -51,  33,   45,   -47,  -63,  10,   30,   -68,  84,
    -6,   -32,  -44,  102,  -8,   -74,  -101, -2,   22,   66,   2,    31,
    -71,  89,   -7,   66,   -4,   63,   -52,  -71,  -2,   47,   21,   28,
    63,   -18,  -87,  -41,  -34,  33,   -1,   -89,  90,   -79,  38,   48,
    70,   -72,  -62,  -65,  -5,   -8,   -26,  -73,  60,   14,   42,   -12,
    46,   -49,  81,   0,    54,   -48,  -19,  -65,  -74,  -3,   -83,  24,
    -94,  -81,  61,   44,   -86,  -31,  -23,  49,   -11,  -66,  -54,  38,
    -87,  -69,  36,   -11,  -37,  -84,  -81,  7,    4,    -79,  43,   2,
    2,    13,   -88,  -95,  -10,  -61,  -94,  -52,  -33,  -73,  -37,  91,
    76,   89,   84,   80,   -34,  81,   -83,  -22,  9,    93,   -52,  -12,
    15,   -58,  -22,  85,   -54,  68,   -43,  -30,  -89,  -2,   54,   -91,
    67,   23,   8,    46,   -76,  24,   77,   -67,  96,   83,   -65,  67,
    -11,  -73,  -22,  -47,  -3,   21,   52,   22,   73,   40,   -99,  -50,
    -66,  77,   -59,  -83,  -85,  -87,  46,   -59,  -21,  74,   86,   73,
    -94,  46,   24,   -72,  -15,  64,   17,   76,   51,   -23,  15,   31,
    -34,  -37,  -29,  44,   -90,  -68,  28,   10,   65,   -32,  -100, -8,
    -20,  -81,  -31,  -54,  90,   61,   -53,  37,   32,   45,   28,   -1,
    -101, 76,   -86,  -33,  -58,  87,   53,   47,   66,   66,   -62,  -60,
    -39,  78,   40,   -15,  -67,  -27,  -1,   6,    80,   1,    61,   97,
    -27,  80,   -25,  -39,  55,   72,   123,  -81,  -79,  99,   -41,  -11,
    -103, 96,   -46,  -40,  4,    -66,  -84,  105,  24,   -30,  78,   92,
    -21,  41,   -79,  -71,  -122, -26,  -53,  9,    -57,  -38,  -55,  -56,
    83,   -14,  50,   18,   39,   -66,  -7,   49,   32,   -72,  83,   -71,
    45,   90,   -75,  27,   113,  28,   -12,  107,  -33,  52,   -69,  -20,
    -4,   60,   -39,  72,   -62,  93,   -40,  -78,  21,   120,  -23,  -50,
    79,   -11,  65,   4,    -11,  -9,   59,   51,   25,   51,   49,   84,
    24,   17,   -95,  6,    -56,  -60,  -39,  62,   -35,  87,   -92,  -47,
    -75,  26,   -5,   87,   92,   -50,  -19,  32,   -37,  80,   8,    16,
    58,   78,   7,    -2,   -78,  -93,  -84,  62,   -52,  48,   -47,  81,
    -20,  69,   -92,  -39,  81,   -83,  -55,  -6,   -8,   102,  78,   -52,
    1,    62,   -33,  -61,  91,   15,   72,   -53,  21,   47,   79,   55,
    -12,  78,   78,   20,   -61,  46,   -42,  30,   -17,  -109, 32,   -70,
    23,   -57,  42,   -36,  19,   69,   56,   -61,  -61,  84,   -61,  -39,
    45,   60,   2,    67,   -102, 70,   101,  50,   -88,  8,    87,   76,
    89,   101,  17,   44,   -90,  -71,  -33,  99,   45,   77,   -88,  -64,
};
const TfArray<2, int> tensor_dimension1 = {2, {48, 66}};
const TfArray<1, float> quant1_scale = {1,
                                        {
                                            0.0023156548850238323,
                                        }};
const TfArray<1, int> quant1_zero = {1, {0}};
const TfLiteAffineQuantization quant1 = {(TfLiteFloatArray*)&quant1_scale,
                                         (TfLiteIntArray*)&quant1_zero, 0};
const ALIGN(16) int32_t tensor_data2[48] = {
    -10, -20, -9, -18, 30,  11,  -23, 31, 4,   13,  -21, -11, 18,  -24, -20, 26,
    14,  -15, -2, 18,  -15, -10, 18,  -2, 12,  27,  3,   10,  10,  17,  5,   18,
    -6,  18,  49, -15, -15, -15, -15, 9,  -12, -12, -9,  -3,  -15, 31,  4,   16,
};
const TfArray<1, int> tensor_dimension2 = {1, {48}};
const TfArray<1, float> quant2_scale = {1,
                                        {
                                            0.00091556512052193284,
                                        }};
const TfArray<1, int> quant2_zero = {1, {0}};
const TfLiteAffineQuantization quant2 = {(TfLiteFloatArray*)&quant2_scale,
                                         (TfLiteIntArray*)&quant2_zero, 0};
const ALIGN(16) int8_t tensor_data3[24 * 48] = {
    -60,  -53,  105, -40,  94,   100,  -8,   -96,  -22,  42,   -47,  12,
    92,   -96,  95,  107,  105,  -89,  96,   70,   -66,  57,   13,   20,
    -68,  72,   -95, -41,  -110, 83,   78,   55,   21,   -7,   104,  -97,
    14,   21,   19,  24,   8,    -80,  -77,  -26,  -84,  -22,  47,   -50,
    -73,  -87,  -80, 78,   67,   -28,  -58,  98,   -75,  44,   -19,  -91,
    32,   13,   -33, 49,   100,  63,   75,   90,   17,   -75,  63,   10,
    17,   105,  -63, -31,  117,  -2,   -75,  -106, 97,   5,    73,   -39,
    -72,  86,   66,  -110, 17,   -40,  29,   86,   7,    -106, -56,  7,
    -89,  9,    -67, -12,  -84,  30,   -12,  6,    20,   33,   65,   0,
    -51,  -108, 21,  96,   62,   88,   105,  -76,  -4,   34,   -37,  -58,
    29,   -70,  6,   -117, 73,   -88,  46,   -16,  6,    -64,  -59,  21,
    55,   36,   3,   75,   34,   13,   -45,  33,   66,   -90,  -62,  -79,
    -67,  -53,  14,  -21,  -22,  12,   -19,  88,   80,   -4,   -4,   53,
    62,   79,   81,  92,   4,    34,   104,  23,   -10,  22,   101,  109,
    -25,  13,   20,  62,   -33,  -63,  -3,   42,   -105, -107, 116,  73,
    -83,  -96,  64,  0,    -54,  -54,  -31,  -84,  52,   52,   85,   84,
    18,   4,    -5,  48,   -37,  -96,  -21,  103,  -52,  -92,  98,   -2,
    87,   -62,  95,  3,    -34,  65,   0,    46,   -104, 21,   -54,  66,
    64,   34,   -24, 99,   -36,  38,   -22,  -92,  -2,   -76,  18,   -12,
    -88,  94,   23,  -34,  -91,  -39,  72,   -46,  98,   56,   -23,  -76,
    58,   28,   63,  -79,  31,   -75,  -99,  56,   46,   20,   -63,  -31,
    58,   60,   9,   62,   -79,  5,    -6,   36,   -8,   52,   3,    64,
    70,   92,   -58, 108,  29,   -61,  14,   127,  -46,  44,   113,  -35,
    -83,  14,   109, -40,  94,   15,   2,    -112, 81,   -25,  96,   -1,
    96,   16,   113, -93,  -48,  -96,  -3,   -96,  9,    10,   -110, -50,
    8,    -76,  -65, 9,    27,   10,   -80,  49,   24,   7,    -4,   58,
    12,   -75,  -76, 44,   12,   93,   42,   82,   2,    48,   4,    -13,
    -14,  74,   89,  97,   -110, -73,  39,   72,   -80,  -41,  42,   11,
    -59,  47,   -24, -59,  95,   -10,  -95,  2,    99,   78,   -114, 75,
    -64,  -93,  34,  -74,  48,   27,   48,   -51,  2,    -33,  76,   -45,
    60,   65,   -18, 28,   -57,  -37,  -16,  92,   69,   -21,  36,   47,
    -79,  44,   2,   104,  -80,  21,   -15,  59,   105,  -17,  13,   83,
    -72,  -35,  -15, -79,  21,   110,  -17,  17,   97,   58,   85,   -48,
    77,   54,   -56, 31,   -28,  -48,  -56,  -41,  25,   6,    -36,  15,
    89,   -38,  84,  51,   -40,  93,   2,    38,   13,   -85,  114,  -75,
    61,   59,   83,  8,    -56,  -105, -61,  6,    -69,  -52,  -71,  113,
    -34,  -94,  -18, -44,  -115, -95,  99,   24,   32,   -18,  -63,  91,
    84,   63,   -27, 10,   -88,  -10,  97,   35,   -35,  -57,  57,   -2,
    -52,  -83,  4,   -25,  -18,  -30,  47,   112,  3,    71,   -20,  2,
    48,   -38,  -47, -9,   84,   -80,  91,   28,   -116, 82,   48,   -5,
    0,    -73,  2,   88,   -41,  96,   24,   107,  108,  -73,  -87,  -80,
    -4,   11,   -27, 14,   62,   107,  72,   105,  -67,  73,   -102, -18,
    23,   -47,  11,  -21,  58,   3,    -91,  84,   -15,  92,   110,  102,
    18,   47,   -72, 41,   -95,  -9,   -26,  107,  92,   -82,  -91,  84,
    9,    9,    61,  89,   76,   -28,  78,   114,  -66,  80,   109,  -105,
    -108, -38,  -83, -57,  -41,  -40,  50,   -42,  12,   20,   -55,  18,
    -9,   36,   -91, -26,  -38,  -3,   32,   23,   -112, 60,   94,   77,
    6,    -103, -11, 72,   -45,  97,   -42,  34,   58,   4,    -5,   90,
    74,   84,   -29, -64,  44,   -102, -9,   -32,  65,   36,   48,   -91,
    -57,  -57,  63,  95,   -89,  -100, 44,   -18,  -24,  -75,  -30,  -73,
    24,   -100, 44,  -102, -108, -99,  -69,  -19,  -40,  17,   16,   -13,
    -32,  28,   -56, 56,   -63,  -41,  -67,  82,   -33,  97,   -64,  -72,
    -27,  -92,  71,  95,   -6,   -56,  -49,  63,   60,   -82,  -75,  -1,
    -74,  73,   50,  56,   59,   46,   -6,   -66,  106,  -10,  42,   -54,
    17,   -38,  37,  121,  28,   -51,  -12,  67,   30,   6,    -13,  96,
    106,  -9,   -33, -55,  85,   86,   -80,  -4,   67,   23,   42,   -3,
    2,    44,   41,  41,   -68,  33,   44,   -105, 87,   -25,  -55,  80,
    59,   72,   43,  -39,  -98,  -10,  -66,  18,   61,   100,  90,   55,
    -89,  100,  72,  10,   -100, -41,  -119, -96,  51,   18,   89,   81,
    -22,  52,   96,  -38,  50,   -42,  102,  15,   97,   75,   21,   92,
    95,   78,   71,  100,  -96,  40,   31,   16,   93,   76,   4,    -88,
    52,   49,   32,  91,   5,    -69,  -92,  94,   19,   -40,  46,   58,
    -57,  8,    114, -111, 30,   105,  102,  -93,  -77,  109,  9,    -89,
    -108, -87,  78,  87,   43,   -43,  -50,  21,   -64,  -8,   78,   37,
    -33,  89,   -39, -29,  -54,  -12,  -95,  98,   -101, 60,   64,   -84,
    74,   -18,  74,  39,   -33,  -73,  -4,   -101, 87,   84,   96,   -21,
    -59,  -37,  -85, 69,   40,   -68,  29,   -1,   0,    -80,  43,   -112,
    74,   -49,  -61, -81,  -65,  -94,  -102, -8,   10,   -79,  26,   -47,
    87,   23,   4,   72,   41,   -5,   -55,  -102, 29,   94,   61,   -11,
    91,   23,   -78, 14,   -112, 43,   45,   7,    31,   10,   111,  23,
    -40,  52,   -43, -33,  1,    54,   76,   60,   -20,  14,   -93,  86,
    -60,  -77,  -45, -65,  -103, 37,   -59,  -121, 47,   12,   94,   -65,
    64,   75,   8,   -104, -95,  115,  -29,  50,   -54,  97,   -26,  -8,
    -99,  -42,  52,  -43,  62,   61,   49,   -54,  -70,  33,   -71,  -8,
    -75,  -107, 43,  94,   82,   40,   -87,  96,   46,   -82,  58,   12,
    -7,   42,   -14, -10,  83,   -2,   23,   26,   -56,  -86,  35,   -91,
    35,   -19,  -37, -78,  99,   -39,  23,   -45,  92,   17,   -1,   29,
    16,   90,   78,  31,   -92,  -54,  88,   91,   103,  -64,  104,  33,
    -3,   31,   -32, -56,  37,   8,    -6,   34,   -91,  -28,  -87,  36,
    -100, -81,  75,  -13,  -42,  -64,  -69,  14,   -107, 67,   81,   -46,
    37,   -105, 65,  87,   52,   -40,  28,   -11,  -64,  73,   98,   47,
    103,  -23,  -71, 84,   53,   15,   -63,  94,   -102, 59,   6,    -106,
    98,   -103, -27, -9,   82,   16,   -14,  69,   -36,  112,  -116, 11,
    8,    -21,  -98, 5,    -34,  -66,  -21,  64,   0,    -63,  -31,  -25,
    -66,  -78,  67,  -89,  94,   -86,  -94,  -39,  82,   -100, -32,  -112,
    -9,   -13,  -82, -46,  61,   59,   -105, -6,   83,   -53,  3,    -97,
    -23,  -51,  -62, -105, 32,   -49,  101,  13,   -113, -20,  -65,  31,
    -14,  30,   5,   -44,  68,   62,   -93,  13,   70,   65,   68,   48,
    26,   77,   19,  106,  91,   43,   46,   25,   111,  -7,   -48,  86,
    -42,  0,    -6,  -3,   19,   87,   -102, -55,  -49,  -90,  -75,  -42,
    33,   41,   -89, 106,  -27,  -53,  37,   -14,  0,    -12,  76,   -68,
    107,  63,   -73, -40,  106,  -71,  43,   19,   41,   80,   12,   -77,
    -58,  -16,  -42, -93,  41,   -18,  -55,  -73,  68,   111,  -95,  -66,
    18,   -31,  -46, 27,   20,   28,   99,   -41,  -36,  -4,   116,  -51,
    -24,  33,   67,  -64,  107,  -25,  18,   49,   95,   19,   63,   9,
    75,   101,  -8,  -26,  -35,  -33,  64,   -33,  -96,  -21,  -14,  106,
};
const TfArray<2, int> tensor_dimension3 = {2, {24, 48}};
const TfArray<1, float> quant3_scale = {1,
                                        {
                                            0.0025816620327532291,
                                        }};
const TfArray<1, int> quant3_zero = {1, {0}};
const TfLiteAffineQuantization quant3 = {(TfLiteFloatArray*)&quant3_scale,
                                         (TfLiteIntArray*)&quant3_zero, 0};
const ALIGN(16) int32_t tensor_data4[24] = {
    53, -17, -36, 29, -27, 138, 22,  21,  138, -9,  28,  -32,
    0,  -39, -29, 35, -23, -42, -44, -19, 30,  -73, -18, 65,
};
const TfArray<1, int> tensor_dimension4 = {1, {24}};
const TfArray<1, float> quant4_scale = {1,
                                        {
                                            0.00035163425491191447,
                                        }};
const TfArray<1, int> quant4_zero = {1, {0}};
const TfLiteAffineQuantization quant4 = {(TfLiteFloatArray*)&quant4_scale,
                                         (TfLiteIntArray*)&quant4_zero, 0};
const ALIGN(16) int8_t tensor_data5[10 * 24] = {
    -35, -78,  -27,  -19,  40,   -110, 5,    -90, -83, -81,  98,   22,   26,
    -8,  6,    51,   -49,  -22,  -104, 106,  -5,  37,  -72,  59,   73,   64,
    32,  -104, -94,  57,   54,   3,    -37,  -34, -25, 90,   -22,  69,   82,
    -44, -48,  -49,  85,   -105, -9,   6,    104, -78, -125, 47,   41,   15,
    105, 91,   87,   25,   15,   107,  11,   59,  -63, 8,    100,  -31,  3,
    49,  -60,  57,   -110, 6,    -52,  -80,  -92, 73,  -5,   63,   -69,  127,
    46,  -12,  92,   -27,  85,   8,    -108, -52, -17, -32,  40,   92,   -99,
    -2,  100,  -8,   52,   23,   -2,   76,   -84, 35,  -23,  -91,  75,   -114,
    -26, 20,   99,   -112, 9,    -106, -44,  78,  21,  -75,  -102, 56,   116,
    51,  88,   -119, -12,  -4,   77,   -111, -46, 7,   -83,  -13,  65,   39,
    -89, -38,  4,    -114, 33,   -21,  105,  17,  54,  79,   47,   -33,  -36,
    -74, -100, 8,    23,   28,   30,   125,  85,  105, 49,   23,   75,   72,
    81,  84,   -106, -35,  -46,  -3,   21,   98,  -52, -57,  0,    -16,  95,
    27,  -14,  104,  -65,  -82,  -58,  -23,  112, 62,  -78,  54,   -12,  -102,
    -72, -62,  -42,  -103, 30,   88,   42,   -84, -77, 45,   7,    43,   12,
    -88, -70,  76,   -69,  57,   -82,  -100, -70, 45,  -2,   -97,  -108, -78,
    -89, -72,  -17,  18,   22,   22,   -53,  -51, 102, -4,   -51,  106,  -91,
    -11, 99,   -97,  32,   112,  31,   -57,  -62, -1,  20,   34,   19,   -79,
    41,  8,    91,   -72,  74,   123,
};
const TfArray<2, int> tensor_dimension5 = {2, {10, 24}};
const TfArray<1, float> quant5_scale = {1,
                                        {
                                            0.0036286350805312395,
                                        }};
const TfArray<1, int> quant5_zero = {1, {0}};
const TfLiteAffineQuantization quant5 = {(TfLiteFloatArray*)&quant5_scale,
                                         (TfLiteIntArray*)&quant5_zero, 0};
const ALIGN(16) int32_t tensor_data6[10] = {
    14, -20, -19, 18, 7, -6, 7, 0, 0, 21,
};
const TfArray<1, int> tensor_dimension6 = {1, {10}};
const TfArray<1, float> quant6_scale = {1,
                                        {
                                            0.00050855579320341349,
                                        }};
const TfArray<1, int> quant6_zero = {1, {0}};
const TfLiteAffineQuantization quant6 = {(TfLiteFloatArray*)&quant6_scale,
                                         (TfLiteIntArray*)&quant6_zero, 0};
const ALIGN(16) int8_t tensor_data7[4 * 10] = {
    42,  87,   -102, -62,  -34,  -123, 98,   103, 107, -61,
    -48, -103, 8,    -100, -127, -125, 45,   55,  18,  -13,
    -69, -42,  -110, -100, 23,   -123, -109, -13, 31,  -53,
    40,  96,   45,   -111, 52,   19,   -57,  -48, -63, -103,
};
const TfArray<2, int> tensor_dimension7 = {2, {4, 10}};
const TfArray<1, float> quant7_scale = {1,
                                        {
                                            0.0051706270314753056,
                                        }};
const TfArray<1, int> quant7_zero = {1, {0}};
const TfLiteAffineQuantization quant7 = {(TfLiteFloatArray*)&quant7_scale,
                                         (TfLiteIntArray*)&quant7_zero, 0};
const ALIGN(16) int32_t tensor_data8[4] = {
    15,
    1,
    33,
    -24,
};
const TfArray<1, int> tensor_dimension8 = {1, {4}};
const TfArray<1, float> quant8_scale = {1,
                                        {
                                            0.00068515964085236192,
                                        }};
const TfArray<1, int> quant8_zero = {1, {0}};
const TfLiteAffineQuantization quant8 = {(TfLiteFloatArray*)&quant8_scale,
                                         (TfLiteIntArray*)&quant8_zero, 0};
const TfArray<2, int> tensor_dimension9 = {2, {1, 48}};
const TfArray<1, float> quant9_scale = {1,
                                        {
                                            0.13620460033416748,
                                        }};
const TfArray<1, int> quant9_zero = {1, {-128}};
const TfLiteAffineQuantization quant9 = {(TfLiteFloatArray*)&quant9_scale,
                                         (TfLiteIntArray*)&quant9_zero, 0};
const TfArray<2, int> tensor_dimension10 = {2, {1, 24}};
const TfArray<1, float> quant10_scale = {1,
                                         {
                                             0.14015071094036102,
                                         }};
const TfArray<1, int> quant10_zero = {1, {-128}};
const TfLiteAffineQuantization quant10 = {(TfLiteFloatArray*)&quant10_scale,
                                          (TfLiteIntArray*)&quant10_zero, 0};
const TfArray<2, int> tensor_dimension11 = {2, {1, 10}};
const TfArray<1, float> quant11_scale = {1,
                                         {
                                             0.1325099766254425,
                                         }};
const TfArray<1, int> quant11_zero = {1, {-128}};
const TfLiteAffineQuantization quant11 = {(TfLiteFloatArray*)&quant11_scale,
                                          (TfLiteIntArray*)&quant11_zero, 0};
const TfArray<2, int> tensor_dimension12 = {2, {1, 4}};
const TfArray<1, float> quant12_scale = {1,
                                         {
                                             0.12226687371730804,
                                         }};
const TfArray<1, int> quant12_zero = {1, {64}};
const TfLiteAffineQuantization quant12 = {(TfLiteFloatArray*)&quant12_scale,
                                          (TfLiteIntArray*)&quant12_zero, 0};
const TfArray<2, int> tensor_dimension13 = {2, {1, 4}};
const TfArray<1, float> quant13_scale = {1,
                                         {
                                             0.00390625,
                                         }};
const TfArray<1, int> quant13_zero = {1, {-128}};
const TfLiteAffineQuantization quant13 = {(TfLiteFloatArray*)&quant13_scale,
                                          (TfLiteIntArray*)&quant13_zero, 0};
const TfLiteFullyConnectedParams opdata0 = {
    kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false};
const TfArray<3, int> inputs0 = {3, {0, 1, 2}};
const TfArray<1, int> outputs0 = {1, {9}};
const TfLiteFullyConnectedParams opdata1 = {
    kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false};
const TfArray<3, int> inputs1 = {3, {9, 3, 4}};
const TfArray<1, int> outputs1 = {1, {10}};
const TfLiteFullyConnectedParams opdata2 = {
    kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false};
const TfArray<3, int> inputs2 = {3, {10, 5, 6}};
const TfArray<1, int> outputs2 = {1, {11}};
const TfLiteFullyConnectedParams opdata3 = {
    kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false};
const TfArray<3, int> inputs3 = {3, {11, 7, 8}};
const TfArray<1, int> outputs3 = {1, {12}};
const TfLiteSoftmaxParams opdata4 = {1};
const TfArray<1, int> inputs4 = {1, {12}};
const TfArray<1, int> outputs4 = {1, {13}};
const TensorInfo_t tensorData[] = {
    {
        kTfLiteArenaRw,
        kTfLiteInt8,
        tensor_arena + 0,
        (TfLiteIntArray*)&tensor_dimension0,
        66,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant0))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt8,
        (void*)tensor_data1,
        (TfLiteIntArray*)&tensor_dimension1,
        3168,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant1))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt32,
        (void*)tensor_data2,
        (TfLiteIntArray*)&tensor_dimension2,
        192,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant2))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt8,
        (void*)tensor_data3,
        (TfLiteIntArray*)&tensor_dimension3,
        1152,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant3))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt32,
        (void*)tensor_data4,
        (TfLiteIntArray*)&tensor_dimension4,
        96,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant4))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt8,
        (void*)tensor_data5,
        (TfLiteIntArray*)&tensor_dimension5,
        240,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant5))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt32,
        (void*)tensor_data6,
        (TfLiteIntArray*)&tensor_dimension6,
        40,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant6))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt8,
        (void*)tensor_data7,
        (TfLiteIntArray*)&tensor_dimension7,
        40,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant7))},
    },
    {
        kTfLiteMmapRo,
        kTfLiteInt32,
        (void*)tensor_data8,
        (TfLiteIntArray*)&tensor_dimension8,
        16,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant8))},
    },
    {
        kTfLiteArenaRw,
        kTfLiteInt8,
        tensor_arena + 80,
        (TfLiteIntArray*)&tensor_dimension9,
        48,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant9))},
    },
    {
        kTfLiteArenaRw,
        kTfLiteInt8,
        tensor_arena + 0,
        (TfLiteIntArray*)&tensor_dimension10,
        24,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant10))},
    },
    {
        kTfLiteArenaRw,
        kTfLiteInt8,
        tensor_arena + 32,
        (TfLiteIntArray*)&tensor_dimension11,
        10,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant11))},
    },
    {
        kTfLiteArenaRw,
        kTfLiteInt8,
        tensor_arena + 16,
        (TfLiteIntArray*)&tensor_dimension12,
        4,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant12))},
    },
    {
        kTfLiteArenaRw,
        kTfLiteInt8,
        tensor_arena + 0,
        (TfLiteIntArray*)&tensor_dimension13,
        4,
        {kTfLiteAffineQuantization,
         const_cast<void*>(static_cast<const void*>(&quant13))},
    },
};
const NodeInfo_t nodeData[] = {
    {
        (TfLiteIntArray*)&inputs0,
        (TfLiteIntArray*)&outputs0,
        const_cast<void*>(static_cast<const void*>(&opdata0)),
        OP_FULLY_CONNECTED,
    },
    {
        (TfLiteIntArray*)&inputs1,
        (TfLiteIntArray*)&outputs1,
        const_cast<void*>(static_cast<const void*>(&opdata1)),
        OP_FULLY_CONNECTED,
    },
    {
        (TfLiteIntArray*)&inputs2,
        (TfLiteIntArray*)&outputs2,
        const_cast<void*>(static_cast<const void*>(&opdata2)),
        OP_FULLY_CONNECTED,
    },
    {
        (TfLiteIntArray*)&inputs3,
        (TfLiteIntArray*)&outputs3,
        const_cast<void*>(static_cast<const void*>(&opdata3)),
        OP_FULLY_CONNECTED,
    },
    {
        (TfLiteIntArray*)&inputs4,
        (TfLiteIntArray*)&outputs4,
        const_cast<void*>(static_cast<const void*>(&opdata4)),
        OP_SOFTMAX,
    },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void* AllocatePersistentBuffer(struct TfLiteContext* ctx, size_t bytes) {
  void* ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf(
          "ERR: Failed to allocate persistent buffer of size %d, does not fit "
          "in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
          (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n",
                (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void* ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx,
                                                size_t bytes, int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf(
        "ERR: Failed to allocate scratch buffer of size %d, reached "
        "EI_MAX_SCRATCH_BUFFER_COUNT\n",
        (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
              (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

}  // namespace

TfLiteStatus trained_model_init(void* (*alloc_fnc)(size_t, size_t)) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*)alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 14;
  for (size_t i = 0; i < 14; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type =
        (tensor_arena <= tensorData[i].data &&
         tensorData[i].data < tensor_arena + kTensorArenaSize)
            ? kTfLiteArenaRw
            : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      uint8_t* start =
          (uint8_t*)((uintptr_t)tensorData[i].data + (uintptr_t)tensor_arena);

      tflTensors[i].data.data = start;
      tflEvalTensors[i].data.data = start;
    } else {
      tflTensors[i].data.data = tensorData[i].data;
      tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif  // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((
          TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr =
          (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf(
        "ERR: tensor arena is too small, does not fit model - even without "
        "scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 5; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(
          &ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 5; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status =
          registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
    0,
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
    13,
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 5; ++i) {
    TfLiteStatus status =
        registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ",
                  ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      } else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ",
                  ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ",
                  ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      } else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ",
                  ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif  // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset(void (*free_fnc)(void* ptr)) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter
  // so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
